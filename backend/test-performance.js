// Test script for performance service
const performanceService = require('./services/performanceService');

// Sample TabTPS response for testing (with Minecraft color codes)
const sampleTabTpsResponse = `ยงf[ยง9Tยงxยง5ยง5ยง7ยง7ยงfยงfaยงxยง5ยง5ยง9ยง9ยงfยงfbยงxยง5ยง5ยงbยงbยงfยงfTยงxยง5ยง5ยงdยงdยงfยงfPยงbSยงf]ยงr ยง7ยงoServer Tick Information
ยง7TPSยงf:ยงr ยงa2ยงxยง4ยง4ยงeยงeยง4ยง40ยงxยง3ยง3ยงdยงdยง3ยง3.ยงxยง2ยง2ยงcยงcยง2ยง20ยงxยง1ยง1ยงbยงbยง1ยง10ยงr ยง7ยงo(1m)ยงf,ยงr ยงa2ยงxยง4ยง4ยงeยงeยง4ยง40ยงxยง3ยง3ยงdยงdยง3ยง3.ยงxยง2ยง2ยงcยงcยง2ยง20ยงxยง1ยง1ยงbยงbยง1ยง10ยงr ยง7ยงo(5m)ยงf,ยงr ยงa2ยงxยง4ยง4ยงeยงeยง4ยง40ยงxยง3ยง3ยงdยงdยง3ยง3.ยงxยง2ยง2ยงcยงcยง2ยง20ยงxยง1ยง1ยงbยงbยง1ยง10ยงr ยง7ยงo(15m)
ยง7MSPTยงf - ยง7Averageยงf, ยง7Minimumยงf, ยง7Maximum
 ยงfโโยงr ยง75sยงf - ยงa5ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb5ยงxยง1ยง5ยงbยงfยง1ยง56ยงf, ยงa1ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb5ยงxยง1ยง5ยงbยงfยง1ยง53ยงf, ยงa1ยงxยง4ยง4ยงeยงeยง4ยง41ยงxยง3ยง3ยงdยงdยง3ยง3.ยงxยง2ยง2ยงcยงcยง2ยง25ยงxยง1ยง1ยงbยงbยง1ยง19
 ยงfโโยงr ยง710sยงf - ยงa5ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb7ยงxยง1ยง5ยงbยงfยง1ยง58ยงf, ยงa1ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb5ยงxยง1ยง5ยงbยงfยง1ยง53ยงf, ยง63ยงxยงfยงfยงbยงbยง1ยง19ยงxยงfยงfยงcยงcยง2ยง2.ยงxยงfยงfยงdยงdยง3ยง35ยงxยงfยงfยงeยงeยง4ยง44
 ยงfโโยงr ยง760sยงf - ยงa5ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb6ยงxยง1ยง5ยงbยงfยง1ยง51ยงf, ยงa1ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb5ยงxยง1ยง5ยงbยงfยง1ยง53ยงf, ยงc4ยงxยงfยงfยง6ยง6ยง4ยง45ยงxยงfยงfยง7ยง7ยง3ยง3.ยงxยงfยงfยง8ยง8ยง2ยง26ยงxยงfยงfยง9ยง9ยง1ยง19
ยง7CPUยงf:ยงr ยงa3ยงxยง4ยง0ยงeยงaยง4ยง0.ยงxยง2ยงbยงdยง5ยง2ยงb4ยงxยง1ยง5ยงbยงfยง1ยง59ยง7%ยงf,ยงr ยงa2ยงxยง3ยง9ยงeยง3ยง3ยง9.ยงxยง1ยงcยงcยง6ยง1ยงc4ยง7%ยงr ยงf(ยง7sys.ยงf, ยง7proc.ยงf)
ยง7RAMยงf:ยงr ยงa3ยงxยง4ยง0ยงeยงaยง4ยง02ยงxยง2ยงbยงdยง5ยง2ยงb3ยงxยง1ยง5ยงbยงfยง1ยง58ยง7Mยงf/ยงa4ยงxยง4ยง0ยงeยงaยง4ยง00ยงxยง2ยงbยงdยง5ยง2ยงb9ยงxยง1ยง5ยงbยงfยง1ยง56ยง7Mยงr ยงf(ยง7max.ยงr ยงa4ยงxยง4ยง0ยงeยงaยง4ยง00ยงxยง2ยงbยงdยง5ยง2ยงb9ยงxยง1ยง5ยงbยงfยง1ยง56ยง7Mยงf)`;

console.log('๐งช Testing Performance Service Parser with Color Codes...\n');

// Test the color stripping function
console.log('๐งน Testing Color Stripping:');
const cleanedResponse = performanceService.stripMinecraftColors(sampleTabTpsResponse);
console.log('Cleaned Response:');
console.log(cleanedResponse);
console.log('\n' + '='.repeat(80) + '\n');

// Test the parser
console.log('๐ Testing Parser:');
const parsed = performanceService.parseTabTpsResponse(sampleTabTpsResponse);

console.log('Parsed Performance Data:');
console.log(JSON.stringify(parsed, null, 2));

// Test adding to history
if (parsed) {
  performanceService.addToHistory(parsed);

  // Test getting current metrics
  console.log('\n๐ Current Metrics:');
  console.log(JSON.stringify(performanceService.getCurrentMetrics(), null, 2));

  // Test server health
  console.log('\n๐ฅ Server Health:');
  console.log(JSON.stringify(performanceService.getServerHealth(), null, 2));
} else {
  console.log('โ Parsing failed!');
}

console.log('\nโ Performance Service Test Complete!');